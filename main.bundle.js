"use strict";(self.webpackChunkrestaurant_page=self.webpackChunkrestaurant_page||[]).push([[179],{426:(n,e,t)=>{t.d(e,{Z:()=>f});var a=t(537),r=t.n(a),i=t(645),o=t.n(i),s=t(667),c=t.n(s),l=new URL(t(910),t.b),A=o()(r());A.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Pinyon+Script&display=swap);"]);var d=c()(l);A.push([n.id,":root {\n  --clr-primary-100: #ffffff;\n  --clr-primary-200: #e0e0e0;\n  --clr-alt: #c59100;\n  --fs-300: 0.6rem;\n  --fs-400: 0.75rem;\n  --fs-500: 16px;\n  --fs-600: 1.2rem;\n  --fs-700: 1.5rem;\n  --fs-750: 2.5rem;\n  --fs-800: 3.5rem;\n  --fs-900: 7rem;\n\n  --fs-body: var(--fs-500);\n}\n\n/* START OF RESET */\n/* Box sizing rules */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n/* Remove default margin, padding and fix font */\n* {\n  margin: 0;\n  padding: 0;\n  font: inherit;\n}\n/* Allow percentage-based heights in the application */\nbody {\n  height: 100vh;\n}\n\n/* Improve media default */\nimg,\npicture,\nvideo,\ncanvas,\nsvg {\n  display: block;\n  max-width: 100%;\n}\n/* Avoid text overflows */\np,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  overflow-wrap: break-word;\n}\n/* Remove list styles on ul and ol elements with a list role */\n\nul[role='list'],\nol[role='list'] {\n  list-style: none;\n}\n/* END OF RESET */\n.flex {\n  display: flex;\n  gap: var(--fs-700);\n}\n\n.flex-col {\n  flex-direction: column;\n  align-items: center;\n}\n\n.justify-center {\n  justify-content: center;\n}\n\n.space-btw {\n  justify-content: space-between;\n}\n\n.darken {\n  background-color: #18181896;\n}\n\n#container {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\nbody {\n  background-image: url("+d+");\n  background-size: cover;\n  background-attachment: fixed;\n  color: var(--clr-primary-200);\n}\n\nheader {\n  height: 8vh;\n  padding: var(--fs-700) 0 var(--fs-700) 0;\n  border-bottom: var(--clr-alt) 3px solid;\n}\n\nli {\n  border-bottom: transparent 2px solid;\n  cursor: pointer;\n  font-size: var(--fs-600);\n}\n\nli:hover {\n  transform: translate(0, -4px);\n  transition: transform ease-in 0.2s;\n  border-bottom: var(--clr-alt) 2px solid;\n  color: var(--clr-primary-100);\n}\n\n#content {\n  flex-grow: 1;\n  padding-bottom: var(--fs-700);\n}\n\n.main {\n  height: 100%;\n  transition: opacity 1s;\n}\n\n.logo {\n  font-family: 'Pinyon Script', Arial, Helvetica, sans-serif;\n}\n\nh1 {\n  font-size: var(--fs-900);\n}\n\nh3 {\n  font-size: var(--fs-750);\n}\n\nh4 {\n  font-size: var(--fs-700);\n}\n\nbutton {\n  border: none;\n  background-color: var(--clr-alt);\n  width: 125px;\n  height: 40px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  color: var(--clr-primary-200);\n}\n\n.menu-header {\n  font-size: var(--fs-800);\n  border-bottom: var(--clr-alt) 3px solid;\n  padding: 0 var(--fs-900);\n}\n\n.menu-grid {\n  width: min(70vw, 1000px);\n  display: grid;\n  grid-template-columns: repeat(2, minmax(300px, 1fr));\n  gap: 50px min(200px, 5vw);\n}\n\n.course {\n  text-align: center;\n  padding: var(--fs-500) 0 var(--fs-400) 0;\n  border-bottom: var(--clr-alt) 2px solid;\n  grid-column: 1 / 3;\n}\n\n.menu-item > div {\n  margin: var(--fs-400) 0;\n}\n\n.contact > * {\n  margin: var(--fs-500);\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AACA;EACE,0BAA0B;EAC1B,0BAA0B;EAC1B,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;EACjB,cAAc;EACd,gBAAgB;EAChB,gBAAgB;EAChB,gBAAgB;EAChB,gBAAgB;EAChB,cAAc;;EAEd,wBAAwB;AAC1B;;AAEA,mBAAmB;AACnB,qBAAqB;AACrB;;;EAGE,sBAAsB;AACxB;AACA,gDAAgD;AAChD;EACE,SAAS;EACT,UAAU;EACV,aAAa;AACf;AACA,sDAAsD;AACtD;EACE,aAAa;AACf;;AAEA,0BAA0B;AAC1B;;;;;EAKE,cAAc;EACd,eAAe;AACjB;AACA,yBAAyB;AACzB;;;;;;;EAOE,yBAAyB;AAC3B;AACA,8DAA8D;;AAE9D;;EAEE,gBAAgB;AAClB;AACA,iBAAiB;AACjB;EACE,aAAa;EACb,kBAAkB;AACpB;;AAEA;EACE,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,yDAA8C;EAC9C,sBAAsB;EACtB,4BAA4B;EAC5B,6BAA6B;AAC/B;;AAEA;EACE,WAAW;EACX,wCAAwC;EACxC,uCAAuC;AACzC;;AAEA;EACE,oCAAoC;EACpC,eAAe;EACf,wBAAwB;AAC1B;;AAEA;EACE,6BAA6B;EAC7B,kCAAkC;EAClC,uCAAuC;EACvC,6BAA6B;AAC/B;;AAEA;EACE,YAAY;EACZ,6BAA6B;AAC/B;;AAEA;EACE,YAAY;EACZ,sBAAsB;AACxB;;AAEA;EACE,0DAA0D;AAC5D;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,YAAY;EACZ,gCAAgC;EAChC,YAAY;EACZ,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,wBAAwB;EACxB,uCAAuC;EACvC,wBAAwB;AAC1B;;AAEA;EACE,wBAAwB;EACxB,aAAa;EACb,oDAAoD;EACpD,yBAAyB;AAC3B;;AAEA;EACE,kBAAkB;EAClB,wCAAwC;EACxC,uCAAuC;EACvC,kBAAkB;AACpB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,qBAAqB;AACvB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Pinyon+Script&display=swap');\n:root {\n  --clr-primary-100: #ffffff;\n  --clr-primary-200: #e0e0e0;\n  --clr-alt: #c59100;\n  --fs-300: 0.6rem;\n  --fs-400: 0.75rem;\n  --fs-500: 16px;\n  --fs-600: 1.2rem;\n  --fs-700: 1.5rem;\n  --fs-750: 2.5rem;\n  --fs-800: 3.5rem;\n  --fs-900: 7rem;\n\n  --fs-body: var(--fs-500);\n}\n\n/* START OF RESET */\n/* Box sizing rules */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n/* Remove default margin, padding and fix font */\n* {\n  margin: 0;\n  padding: 0;\n  font: inherit;\n}\n/* Allow percentage-based heights in the application */\nbody {\n  height: 100vh;\n}\n\n/* Improve media default */\nimg,\npicture,\nvideo,\ncanvas,\nsvg {\n  display: block;\n  max-width: 100%;\n}\n/* Avoid text overflows */\np,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  overflow-wrap: break-word;\n}\n/* Remove list styles on ul and ol elements with a list role */\n\nul[role='list'],\nol[role='list'] {\n  list-style: none;\n}\n/* END OF RESET */\n.flex {\n  display: flex;\n  gap: var(--fs-700);\n}\n\n.flex-col {\n  flex-direction: column;\n  align-items: center;\n}\n\n.justify-center {\n  justify-content: center;\n}\n\n.space-btw {\n  justify-content: space-between;\n}\n\n.darken {\n  background-color: #18181896;\n}\n\n#container {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\nbody {\n  background-image: url('./imgs/background.jpg');\n  background-size: cover;\n  background-attachment: fixed;\n  color: var(--clr-primary-200);\n}\n\nheader {\n  height: 8vh;\n  padding: var(--fs-700) 0 var(--fs-700) 0;\n  border-bottom: var(--clr-alt) 3px solid;\n}\n\nli {\n  border-bottom: transparent 2px solid;\n  cursor: pointer;\n  font-size: var(--fs-600);\n}\n\nli:hover {\n  transform: translate(0, -4px);\n  transition: transform ease-in 0.2s;\n  border-bottom: var(--clr-alt) 2px solid;\n  color: var(--clr-primary-100);\n}\n\n#content {\n  flex-grow: 1;\n  padding-bottom: var(--fs-700);\n}\n\n.main {\n  height: 100%;\n  transition: opacity 1s;\n}\n\n.logo {\n  font-family: 'Pinyon Script', Arial, Helvetica, sans-serif;\n}\n\nh1 {\n  font-size: var(--fs-900);\n}\n\nh3 {\n  font-size: var(--fs-750);\n}\n\nh4 {\n  font-size: var(--fs-700);\n}\n\nbutton {\n  border: none;\n  background-color: var(--clr-alt);\n  width: 125px;\n  height: 40px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  color: var(--clr-primary-200);\n}\n\n.menu-header {\n  font-size: var(--fs-800);\n  border-bottom: var(--clr-alt) 3px solid;\n  padding: 0 var(--fs-900);\n}\n\n.menu-grid {\n  width: min(70vw, 1000px);\n  display: grid;\n  grid-template-columns: repeat(2, minmax(300px, 1fr));\n  gap: 50px min(200px, 5vw);\n}\n\n.course {\n  text-align: center;\n  padding: var(--fs-500) 0 var(--fs-400) 0;\n  border-bottom: var(--clr-alt) 2px solid;\n  grid-column: 1 / 3;\n}\n\n.menu-item > div {\n  margin: var(--fs-400) 0;\n}\n\n.contact > * {\n  margin: var(--fs-500);\n}\n"],sourceRoot:""}]);const f=A},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",a=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),a&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),a&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,a,r,i){"string"==typeof n&&(n=[[null,n,void 0]]);var o={};if(a)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(o[c]=!0)}for(var l=0;l<n.length;l++){var A=[].concat(n[l]);a&&o[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),r&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=r):A[4]="".concat(r)),e.push(A))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),i="/*# ".concat(r," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,a=0;a<e.length;a++)if(e[a].identifier===n){t=a;break}return t}function a(n,a){for(var i={},o=[],s=0;s<n.length;s++){var c=n[s],l=a.base?c[0]+a.base:c[0],A=i[l]||0,d="".concat(l," ").concat(A);i[l]=A+1;var f=t(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==f)e[f].references++,e[f].updater(p);else{var h=r(p,a);a.byIndex=s,e.splice(s,0,{identifier:d,updater:h,references:1})}o.push(d)}return o}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var i=a(n=n||[],r=r||{});return function(n){n=n||[];for(var o=0;o<i.length;o++){var s=t(i[o]);e[s].references--}for(var c=a(n,r),l=0;l<i.length;l++){var A=t(i[l]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}i=c}}},569:n=>{var e={};n.exports=function(n,t){var a=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var a="";t.supports&&(a+="@supports (".concat(t.supports,") {")),t.media&&(a+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(a+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),a+=t.css,r&&(a+="}"),t.media&&(a+="}"),t.supports&&(a+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(a,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},417:(n,e,t)=>{var a=t(379),r=t.n(a),i=t(795),o=t.n(i),s=t(569),c=t.n(s),l=t(565),A=t.n(l),d=t(216),f=t.n(d),p=t(589),h=t.n(p),m=t(426),u={};function v(n){const e=document.createElement(n.getElement());n.getText()&&(e.textContent=n.getText());let t=n.getClasses();if(t){const n=t.split(" ");for(const t of n)e.classList.add(t)}if(0!==n.getChildren().length)for(const t of n.getChildren()){const n=v(t);e.appendChild(n)}return e}u.styleTagTransform=h(),u.setAttributes=A(),u.insert=c().bind(null,"head"),u.domAPI=o(),u.insertStyleElement=f(),r()(m.Z,u),m.Z&&m.Z.locals&&m.Z.locals;const g=(n,e,t="",a=[])=>{let r=n,i=e,o=t,s=a;return{addChild:n=>{a.push(n)},getElement:()=>r,getText:()=>i,getClasses:()=>o,getChildren:()=>s}};function C(n){const e=document.querySelector("#content");for(const t of n)e.appendChild(v(t))}const E=[g("div","","main flex flex-col justify-center",[g("h1","Gabe's Italian","logo"),g("h3","Nothing brings people together like good food."),g("button","Menu")])],B=[g("div","","main flex flex-col",[g("h1","Gabe's Italian","logo"),g("h2","Menu","menu-header"),g("div","","menu-grid",[g("h3","Appetiser","course"),g("div","","menu-item",[g("div","","flex space-btw",[g("h4","Bruschetta","dish-name"),g("h4","$7.99","price")]),g("p","Our classic bruschetta features toasted bread topped with fresh diced tomatoes, garlic basil, and drizzled with extra virgin olive oil. It's a light and refreshing appetizer that's perfect for summer","dish-desc")]),g("div","","menu-item",[g("div","","flex space-btw",[g("h4","Arancini","dish-name"),g("h4","$9.99","price")]),g("p","These crispy fried rice balls are stuffed with a savory filling of mozzarella cheese and either meat, mushrooms, or vegetables. They're a popular Sicilian street food and make for a delicious and filling appetizer that's perfect for sharing.","dish-desc")]),g("div","","menu-item",[g("div","","flex space-btw",[g("h4","Caprese Salad","dish-name"),g("h4","$8.99","price")]),g("p","Made with ripe tomatoes, fresh mozzarella, and fragrant basil leaves, our Caprese salad is a simple and classic Italian appetizer. Drizzled with extra virgin olive oil and a sprinkle of salt and black pepper, it's a light and refreshing way to start your meal.","dish-desc")])]),g("div","","menu-grid",[g("h3","Main","course"),g("div","","menu-item",[g("div","","flex space-btw",[g("h4","Spaghetti Carbonara","dish-name"),g("h4","$16.99","price")]),g("p","A classic Roman dish made with spaghetti, pancetta, eggs, and Pecorino Romano cheese. Creamy and delicious, this dish is perfect for those who love rich and savory flavors.","dish-desc")]),g("div","","menu-item",[g("div","","flex space-btw",[g("h4","Margherita Pizza","dish-name"),g("h4","$14.99","price")]),g("p","A traditional Neapolitan pizza topped with tomato sauce, mozzarella cheese, and fresh basil. Simple yet satisfying, this pizza is a crowd-pleaser and a staple of Italian cuisine.","dish-desc")]),g("div","","menu-item",[g("div","","flex space-btw",[g("h4","Chicken Parmigiana","dish-name"),g("h4","$18.99","price")]),g("p","A classic Italian-American dish made with breaded chicken, tomato sauce, and melted mozzarella cheese. Served with a side of spaghetti, this hearty dish is sure to fill you up.","dish-desc")]),g("div","","menu-item",[g("div","","flex space-btw",[g("h4","Risotto ai Funghi","dish-name"),g("h4","$19.99","price")]),g("p","Creamy and flavorful, this dish features Arborio rice cooked with porcini mushrooms, white wine, and Parmesan cheese. Perfect for vegetarians, it's a delicious way to enjoy the earthy flavors of mushrooms in a rich and satisfying meal.","dish-desc")])]),g("div","","menu-grid",[g("h3","Dessert","course"),g("div","","menu-item",[g("div","","flex space-btw",[g("h4","Tiramisu","dish-name"),g("h4","$8.99","price")]),g("p","This classic Italian dessert consists of layers of ladyfingers soaked in espresso and layered with a light and fluffy mascarpone cheese filling. It's the perfect combination of sweet and bitter flavors, making it a favorite among coffee lovers.","dish-desc")]),g("div","","menu-item",[g("div","","flex space-btw",[g("h4","Cannoli","dish-name"),g("h4","$8.99","price")]),g("p","These crunchy pastry shells are filled with a sweet, creamy ricotta cheese filling and can be flavored with ingredients such as chocolate chips or pistachios. They're a beloved Sicilian treat that has become a staple in Italian-American cuisine.","dish-desc")]),g("div","","menu-item",[g("div","","flex space-btw",[g("h4","Gelato","dish-name"),g("h4","$5.99","price")]),g("p","This Italian-style ice cream is known for its rich and creamy texture and intense flavors. Our gelato is made fresh daily using the finest ingredients, with classic flavors like chocolate and vanilla, as well as more unique options like stracciatella and hazelnut.","dish-desc")]),g("div","","menu-item",[g("div","","flex space-btw",[g("h4","Affogato","dish-name"),g("h4","$7.99","price")]),g("p",'This simple yet delicious dessert consists of a scoop of vanilla gelato "drowned" in a shot of hot espresso. The combination of cold and hot, sweet and bitter flavors is a perfect end to any meal.',"dish-desc")])])])],b=[g("div","","main flex flex-col justify-center",[g("h1","Gabe's Italian","logo"),g("div","","contact",[g("h3","Contact Us"),g("p","Phone Number: +39 06 85 42 71 23"),g("p","Email: gabeitalian32@gmail.com"),g("p","Location: Via Consolare Antica, 722, 98071 Capo d'Orlando ME, Italy")])])];let y="Home";function x(n){if(n.target.textContent!==y)switch(function(){const n=document.querySelector(".main");document.querySelector(".content").removeChild(n)}(),n.target.textContent){case"Home":C(E),document.querySelector("button").addEventListener("click",x),y="Home";break;case"Menu":C(B),y="Menu";break;case"Contact":C(b),document.querySelector(".main").innerHTML+='<iframe\n      src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d1569.2964476188042!2d14.723822231719838!3d38.1264045337131!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x1316946dc0ebcd67%3A0xcd3099340f32d939!2sVia%20Consolare%20Antica%2C%20722%2C%2098071%20Capo%20d&#39;Orlando%20ME%2C%20Italy!5e0!3m2!1sen!2ssg!4v1680510708481!5m2!1sen!2ssg"\n      width="600"\n      height="450"\n      style="border: 0" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>',y="Contact"}}!function(n){C(n);const e=document.querySelectorAll("li");for(const n of e)n.addEventListener("click",x)}(E)},910:(n,e,t)=>{n.exports=t.p+"2ecacd989d2d74f4a8b8.jpg"}},n=>{n(n.s=417)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,